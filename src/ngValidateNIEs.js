/** * Module for validate NIE / NIF / DNI and CIF for spanish validations forms in Angular * @version v0.0.1 - 2016-03-29 * @author Alberto Gutierrez <magutierrez@emergya.com> * @license MIT License, http://www.opensource.org/licenses/MIT */'use strict';angular.module('ngValidateNIEs', [])    .factory('$vatEsValidators', function() {        return {            validNIE: function(nie) {                var NIE_REGEX = /^[XYZxyz]\d{7,8}[A-Za-z]$/;                if (nie.match(NIE_REGEX)) {                    var nie_prefix = nie.charAt(0);                    switch (nie_prefix) {                        case 'X':                            nie_prefix = 0;                            break;                        case 'x':                            nie_prefix = 0;                            break;                        case 'Y':                            nie_prefix = 1;                            break;                        case 'y':                            nie_prefix = 1;                            break;                        case 'Z':                            nie_prefix = 2;                            break;                        case 'z':                            nie_prefix = 2;                            break;                    }                    return nie_prefix + nie.substr(1);                } else {                    return false;                }            },            validCIF: function(cif) {                cif = cif.toUpperCase();                var r_expression1 = /^[ABEH]\d{8}$/i;                var r_expression2 = /^[KPQS][0-9]{7}[A-J]$/i;                var r_expression3 = /^[CDFGJLMNRUVW][0-9]{7}[0-9A-J]$/i;                if (cif.match(r_expression1) || cif.match(r_expression2) || cif.match(r_expression3)) {                    var control = cif[cif.length - 1];                    var sum_a = 0;                    var sum_b = 0;                    for (var i = 1; i < 8; i++) {                        if (i % 2 === 0) {                            sum_a += parseInt(cif[i]);                        } else {                            var aux_a = parseInt(cif[i]) * 2;                            var aux_b = 0;                            if (aux_a > 9)                                aux_b = 1 + (aux_a - 10);                            else                                aux_b = aux_a;                            sum_b += aux_b;                        }                    }                    var sum_c = (parseInt(sum_a + sum_b)) + "";                    var sum_d = (10 - (parseInt(sum_c[sum_c.length - 1]))) % 10;                    var letters = "JABCDEFGHI";                    if (control >= "0" && control <= "9") {                        return (control == sum_d);                    } else {                        return ((control.toUpperCase()) === letters[sum_d]);                    }                } else {                    return false;                }            },            validDNI: function(dni) {                var regExp = /^\d{8}[a-zA-Z]$/;                if (regExp.test(dni)) {                    var sequence = 'TRWAGMYFPDXBNJZSQVHLCKET';                    var value = dni.substr(0, dni.length - 1);                    var letter = dni.substr(dni.length - 1, 1).toUpperCase();                    if (sequence.charAt(value % 23) === letter)                        return true;                } else {                    return false;                }            }        };    })    .directive('validateNiEs', ['$vatEsValidators', function($vatEsValidators) {        return {            restric: 'A',            require: 'ngModel',            link: function(scope, elem, iAttrs, ctrl) {                ctrl.$parsers.unshift(checkNIEs);                function checkNIEs(value) {                    if ($vatEsValidators.validCIF(value)) {                        ctrl.$setValidity('validateNiEs', true);                    }                    else if ($vatEsValidators.validDNI(value)) {                        ctrl.$setValidity('validateNiEs', true);                    }                    else if ($vatEsValidators.validNIE(value)) {                        if ($vatEsValidators.validDNI($vatEsValidators.validNIE(value)))                            ctrl.$setValidity('validateNiEs', true);                        else                            ctrl.$setValidity('validateNiEs', false);                    }                    else {                        ctrl.$setValidity('validateNiEs', false);                    }                    return value;                }            }        };    }]);